- pretty symlinks for users
- check for free space
- make list command show snapshots as a tree. Maybe optional
- investigate rsync option -y, --fuzzy
- how to deal with oldest snapshot?
  - special prune for highest interval:
    - by free block/inode space
    - option "-keepOldest":
        wether to keep the oldest snapshot (thus being able to go back to the beginning)
        or not, saving disk space.
- think about if it is useful to add the full origin path name to the repository subdirs
- regularly log memory stats
- deal with negative time shifts in transComplete()
- user configurable schedules? Or many predefined ones?
- subcommand "schedule" to show details about schedules:
  - expected number of snapshots
  - expected disk usage, given a start value + daily changes
- handle errors in RemoveAll (no write permission, what to do?)
- in case of restarting snaprd after a long time it will remove too many snapshots
  - handle that case in prune()
- avoid passing pointers through channels (minimize possibility of data races)
- Read http://golang.org/ref/spec#Receive_operator again and rethink subcmdRun()
  design. Use close(c) when appropriate.
- support more than one directory to backup (avoid having to run many instances on a system)
- mail hook in case of failed/missed backup
